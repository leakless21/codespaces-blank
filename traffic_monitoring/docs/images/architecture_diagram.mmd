flowchart LR
    title[<b>Traffic Monitoring System Architecture</b>]
    
    %% Main components with improved node shapes
    Camera((Camera Input))
    
    subgraph Processing["Processing Pipeline"]
        direction TB
        Video[/"Video Ingestion Service"\]
        Detection[["Object Detection Service"]]
        Tracking[["Object Tracking Service"]]
        Counting[["Vehicle Counting Service"]]
        OCR[["License Plate OCR Service"]]
    end
    
    subgraph DataFlow["Data Management"]
        direction TB
        MQTT{{MQTT Broker}}
        Storage[("Storage Service")]
        DB[(Database)]
        API>"REST API"]
    end
    
    subgraph UI["User Interface"]
        direction TB
        Dashboard["Dashboard Visualization"]
        Reports["Reports & Analytics"]
    end
    
    %% Flow between components with better arrow styling
    Camera ==> Video
    Video ==> Detection
    Detection ==> Tracking
    Tracking ==> Counting
    Tracking ==> OCR
    
    %% MQTT messaging with clear indication of published messages
    Detection -.->|"Publish detections"| MQTT
    Tracking -.->|"Publish tracks"| MQTT
    Counting -.->|"Publish counts"| MQTT
    OCR -.->|"Publish plate data"| MQTT
    
    %% Data storage flow
    MQTT -.->|"Subscribe to topics"| Storage
    Storage ==>|"Store data"| DB
    DB ==>|"Query data"| API
    
    %% Output visualization
    API ==> Dashboard
    API ==> Reports
    
    %% Styling
    classDef input fill:#b9fbc0,stroke:#333,stroke-width:1px
    classDef process fill:#90dbf4,stroke:#333,stroke-width:1px
    classDef messaging fill:#fbf8cc,stroke:#333,stroke-width:1px
    classDef storage fill:#98f5e1,stroke:#333,stroke-width:1px
    classDef ui fill:#f1c0e8,stroke:#333,stroke-width:1px
    
    class Camera input
    class Video,Detection,Tracking,Counting,OCR process
    class MQTT messaging
    class Storage,DB,API storage
    class Dashboard,Reports ui
